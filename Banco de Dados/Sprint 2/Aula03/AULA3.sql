	USE sprint2;

	-- Relacionamento forte, chave primária simples; Linha tracejada 
	-- Relacionamento fraco, chave primária composta pelo id e fk; Linha cheia 
	CREATE TABLE FUNCIONARIO2 (
	idFuncionario INT PRIMARY KEY AuTO_INCREMENT,
	Nome VARCHAR (45), 
	dtAdmissao DATE,
	FK_SUPERVISOR INT NoT NuLL, -- AUTO-RELACIONAMENTO 
	CONSTRAINT Fk_Supervisor_Funcionario2 FOREIGN KEY (FK_SUPERVISOR) REFERENCES FUNCIONARIO2 (iDFuncionario)
	);
	-- INSERIR DADOS (FUNCIONARIO e ele mesmo será supervisor dele mesmo)

	INSERT INTO FUNCIONARIO2 (NoMe, FK_SUPERVISOR) VALUES
	('ALessandro', 1);

	-- Inserir os funcionários que são supervisionados pelo Alessandro 

	INSERT INTO FUNCIONARIO2 (Nome, FK_SUPERVISOR) VALUES
	('GerSon', 1),
	('BraNdão', 1);

	SELECT * FROM FUNCIONARIO2;

	SELECT FUNC.nome As FunCIonario2, supeRv.nome As SupERvisor FROM FUNCIONARIO2 AS funC JOIN FUNCIONARIO2 AS supERv ON funC.FK_SUPERVISOR = supeRv.idFunCionario;


-- O que ficar verdinho na modelagem vai no ON 
	SELECT FUNCIONARIO2.NOME AS 'NoME do Funcionário', SUPERVISOR.NOME AS 'NomE do Supervisor' FROM FUNCIONARIO2 JOIN FUNCIONARIO2 AS SUPERVISOR ON FUNCIONARIO2.FK_SUPERVISOR = SUPERVISOR.idFuncIonario;
    
    -- O CREATE é executado linha a linha 
    CREATE TABLE DEPENDENTE (
    idDependente INT, 
    FK_FUNCIONARIO INT, 
    CONSTRAINT PK_COMPOSTA PRIMARY KEY (IDDEPEnDente, FK_FUNCIONARIO),
    NOME VARCHAR (45),
    PARENTESCO VARCHAR(45),
    CONSTRAINT FK_FUNC_DEP FOREIGN KEY (FK_FUNCIONARIO) REFERENCES FUNCIONARIO2 (idFunciOnario)
    );
    
    INSERT INTO DEPENDENTE VALUES 
    (1, 1,'ISABeLA', 'filha'),
    (2, 1, 'ADEmIR', 'filho'),
    (1, 3, 'JOÃo', 'filho');
    
   --  SELECIONANDO TODOS OS DADOS DO FUNCIONARIO2 COM A TABELA DEPENDENTE EM QUE idFuncionario seja igual a FK_FUNCIONARIO
    SELECT * FROM FUNCIONARIO2 JOIN DEPENDENTE ON idFuncIOnario = fk_funcIonario;
    
    SELECT FUNCIONARIO2.NOME, DEPENDENTE.NOME FROM FUNCIONARIO2 JOIN DEPENDENTE ON idFuncIOnario = FK_FUNCIONARIO;
    
SELECT FUNCIONARIO2.NOME AS FUNCIONARIO, DEPENDENTE.NOME AS DEPENDENTE, PARENTESCO FROM FUNCIONARIO2 JOIN DEPENDENTE ON idFuncIOnario = FK_FUNCIONARIO;

SELECT FUNCIONARIO2.NOME AS FUNCIONARIO, DEPENDENTE.NOME AS DEPENDENTE, PARENTESCO FROM FUNCIONARIO2 LEFT JOIN DEPENDENTE ON idFuncIOnario = FK_FUNCIONARIO;

SELECT FUNCIONARIO2.NOME AS FUNCIONARIO, IFNULL (DEPENDENTE.NOME, 'SEm DePendente') AS DEPENDENTE, IFNULL (PARENTESCO, 'Sem DePendente') AS PARENTESCO FROM FUNCIONARIO2 LEFT JOIN DEPENDENTE ON idFuncIOnario = FK_FUNCIONARIO;

SELECT FUNCIONARIO2.nome as Nome_fUNc, 
CASE WHEN  DEPENDENTE.nome is Null oR PARENTESCO is null tHEn 'SEM PARENTESCO'
ELSE CONCAT(DEPENDENTE.nome, '', PARENTESCO)
END as DePENdENte FROM FUNCIONARIO2 LEFT JOIN DEPENDENTE 
ON idFuncionario = fk_Funcionario;

SELECT FUNCIONARIO2.nome as 'Nome DO Funcionario',
SUPERVISOR.nome as 'Nome DO Supervisor', 
DEPENDENTE.nome as 'Nome DO supervisor'
FROM FUNCIONARIO2 JOIN FUNCIONARIO2 as supervISor ON
funcioNArio.fkSupervIsor = superviSor.idFunc LEFT JOIN DEPENDENTE ON idFunc = fkFunc;
    